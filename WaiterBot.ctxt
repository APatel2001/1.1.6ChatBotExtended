#BlueJ class context
comment0.target=WaiterBot
comment0.text=\n\ A\ program\ that\ serves\ as\ a\ virtual\ waiter\ conversing\ with\ a\ human\ customer\n\ This\ version\:\n<ul><li>\n\ \ \ \ \ \ Uses\ advanced\ search\ for\ keywords\ \n</li><li>\n\ \ \ \ \ \ Will\ transform\ statements\ as\ well\ as\ react\ to\ keywords\n</li></ul>\n\ @author\ Avi\ Patel\n\ @author\ Jonathan\ Wang\n\ @author\ Ethan\ Lau\n\ @version\ 11/12/19\n\n
comment1.params=
comment1.target=java.lang.String\ getGreeting()
comment1.text=\n\ Get\ a\ default\ greeting\ \ \ \n\ @return\ a\ greeting\n
comment10.params=statement\ goal
comment10.target=int\ findKeyword(java.lang.String,\ java.lang.String)
comment10.text=\n\ Search\ for\ one\ word\ in\ phrase.\ \ The\ search\ is\ not\ case\ sensitive.\n\ This\ method\ will\ check\ that\ the\ given\ goal\ is\ not\ a\ substring\ of\ a\ longer\ string\n\ (so,\ for\ example,\ "I\ know"\ does\ not\ contain\ "no").\ \ The\ search\ begins\ at\ the\ beginning\ of\ the\ string.\ \ \n\ @param\ statement\ the\ string\ to\ search\n\ @param\ goal\ the\ string\ to\ search\ for\n\ @return\ the\ index\ of\ the\ first\ occurrence\ of\ goal\ in\ statement\ or\ -1\ if\ it's\ not\ found\n
comment11.params=
comment11.target=java.lang.String\ getRandomResponse()
comment11.text=\n\ Pick\ a\ default\ response\ to\ use\ if\ nothing\ else\ fits.\n\ @return\ a\ non-committal\ string\n
comment12.params=
comment12.target=java.lang.String\ getJoke()
comment13.params=
comment13.target=java.lang.String\ religion()
comment13.text=\n\ gets\ response\ if\ user\ asks\ about\ religion\n\ @return\ input\ based\ on\ input\ frequency,\ utilizes\ religionflag\ variable\n\ as\ counter\n
comment14.params=
comment14.target=java.lang.String\ politic()
comment14.text=\n\ gets\ response\ if\ user\ asks\ about\ politics\n\ @return\ reponse\ based\ on\ frequency\ of\ input,\ uses\ politics\ flag\ as\ counter\n
comment15.params=statement
comment15.target=java.lang.String\ allergies(java.lang.String)
comment15.text=\n\ Provides\ allergy\ information\n\ @param\ statement\n\ @return\ response\n
comment16.params=statement
comment16.target=java.lang.String\ menuDescription(java.lang.String)
comment16.text=\n\ Gives\ description\ of\ menu\ items\n\ @param\ statement\n\ @return\ response\ \n
comment17.params=statement
comment17.target=java.lang.String\ getPrice(java.lang.String)
comment17.text=\n\ Provides\ price\ to\ user\n\ @param\ statement\n\ @return\ response\n
comment18.params=
comment18.target=java.lang.String\ music()
comment18.text=\n\ getter\ method\ for\ bot's\ music\ reference\n\ @return\ string\ to\ respond\ to\ user\ input\n
comment19.params=
comment19.target=java.lang.String\ uncomfortable()
comment2.params=
comment2.target=java.lang.String\ getName()
comment2.text=\n\ gets\ bot's\ name\n\ @return\ name\n
comment20.params=statement
comment20.target=java.lang.String\ getBuy(java.lang.String)
comment20.text=\n\ Displays\ menu\ item\ ordered\ and\ totals\ up\ the\ price\ that\ you\ need\ to\ pay\n\ @param\ statement\n\ @return\ statement\ of\ menu\ item\ ordered\n
comment21.params=
comment21.target=java.lang.String\ getreceipt()
comment21.text=\n\ displays\ a\ list\ of\ each\ menu\ item,\ the\ number\ of\ times\ ordered,\ and\ the\ total\ amount\ spend\ on\ the\ item\n\ @return\ receipt\n
comment3.params=
comment3.target=java.lang.String\ getCreator()
comment3.text=\n\ gets\ bot's\ creator\ names\n\ @return\ creator\ names\n
comment4.params=
comment4.target=java.lang.String\ getAge()
comment4.text=\n\ gets\ bot's\ age\n\ @return\ bot's\ age\n
comment5.params=statement
comment5.target=java.lang.String\ getResponse(java.lang.String)
comment5.text=\n\ Gives\ a\ response\ to\ a\ user\ statement\n\ \n\ @param\ statement\n\ \ \ \ \ \ \ \ \ \ \ \ the\ user\ statement\n\ @return\ a\ response\ based\ on\ the\ rules\ given\n
comment6.params=statement
comment6.target=java.lang.String\ transformIWantStatement(java.lang.String)
comment6.text=\n\ Take\ a\ statement\ with\ "I\ want\ to\ <something>."\ and\ transform\ it\ into\ \n\ "What\ would\ it\ mean\ to\ <something>?"\n\ @param\ statement\ the\ user\ statement,\ assumed\ to\ contain\ "I\ want\ to"\n\ @return\ the\ transformed\ statement\n
comment7.params=statement
comment7.target=java.lang.String\ transformYouMeStatement(java.lang.String)
comment7.text=\n\ Take\ a\ statement\ with\ "you\ <something>\ me"\ and\ transform\ it\ into\ \n\ "What\ makes\ you\ think\ that\ I\ <something>\ you?"\n\ @param\ statement\ the\ user\ statement,\ assumed\ to\ contain\ "you"\ followed\ by\ "me"\n\ @return\ the\ transformed\ statement\n\ If\ user\ responds\ with\ past\ tense\ keyword\ "are",\ code\ removes\ the\ keyword\ and\ returns\n\ a\ substring\ of\ the\ statement\ that\ makes\ sense\ grammatically\n
comment8.params=statement
comment8.target=java.lang.String\ transformWhyStatement(java.lang.String)
comment8.text=\n\ Method\ designed\ towards\ creating\ a\ specific\ repsonse\ aimed\ towards\ user\n\ statements\ that\ include\ initial\ keyword\ of\ "I"\ and\ keyword\ "you"\n\ @param\ statement\ entered\n\ @return\ response\ to\ the\ question\n
comment9.params=statement\ goal\ startPos
comment9.target=int\ findKeyword(java.lang.String,\ java.lang.String,\ int)
comment9.text=\n\ Search\ for\ one\ word\ in\ phrase.\ \ The\ search\ is\ not\ case\ sensitive.\n\ This\ method\ will\ check\ that\ the\ given\ goal\ is\ not\ a\ substring\ of\ a\ longer\ string\n\ (so,\ for\ example,\ "I\ know"\ does\ not\ contain\ "no").\ \ \n\ @param\ statement\ the\ string\ to\ search\n\ @param\ goal\ the\ string\ to\ search\ for\n\ @param\ startPos\ the\ character\ of\ the\ string\ to\ begin\ the\ search\ at\n\ @return\ the\ index\ of\ the\ first\ occurrence\ of\ goal\ in\ statement\ or\ -1\ if\ it's\ not\ found\n
numComments=22
